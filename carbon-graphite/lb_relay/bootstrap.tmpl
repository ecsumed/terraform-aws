sudo apt install -y \
libpango1.0-0 \
libcairo2 \
libpq-dev \
apache2 \
python-pip \
build-essential \
libpangocairo-1.0-0 \
libffi-dev \
libapache2-mod-wsgi \

sudo export PYTHONPATH="/opt/graphite/lib/:/opt/graphite/webapp/"
sudo pip install --no-binary=:all: https://github.com/graphite-project/whisper/tarball/master
sudo pip install --no-binary=:all: https://github.com/graphite-project/carbon/tarball/master
sudo pip install --no-binary=:all: https://github.com/graphite-project/carbon/tarball/master
sudo pip install --no-binary=:all: https://github.com/graphite-project/graphite-web/tarball/master

cat>>/tmp/graphite_vhost<<EOF
LoadModule wsgi_module modules/mod_wsgi.so

WSGISocketPrefix /var/run/wsgi

Listen 80
<VirtualHost *:80>

    ServerName graphite
    DocumentRoot "/opt/graphite/webapp"
    ErrorLog /opt/graphite/storage/log/webapp/error.log
    CustomLog /opt/graphite/storage/log/webapp/access.log common

    WSGIDaemonProcess graphite-web processes=5 threads=5 display-name='$%{GROUP}' inactivity-timeout=120
    WSGIProcessGroup graphite-web
    WSGIApplicationGroup $%{GLOBAL}
    WSGIImportScript /opt/graphite/conf/graphite.wsgi process-group=graphite-web application-group=$%{GLOBAL}

    WSGIScriptAlias / /opt/graphite/conf/graphite.wsgi

    # Alias /static/ /opt/graphite/static/
    Alias /static/ /opt/graphite/webapp/content/

    <Directory /opt/graphite/static/>
            Require all granted
    </Directory>

    <Directory /opt/graphite/webapp/content>
            Require all granted
    </Directory>

    <Directory /opt/graphite/conf/>
            Require all granted
    </Directory>
</VirtualHost>
EOF

sudo mv /tmp/graphite_vhost /etc/apache2/sites-available/graphite.conf

sudo rm /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-enabled/000-default.conf
sudo ln -s /etc/apache2/sites-available/graphite.conf /etc/apache2/sites-enabled/

sudo PYTHONPATH=/opt/graphite/webapp django-admin.py migrate --settings=graphite.settings --run-syncdb

sudo cp /opt/graphite/conf/graphite.wsgi.example /opt/graphite/conf/graphite.wsgi

sudo chown www-data:www-data /opt/graphite/storage/graphite.db
sudo chown www-data:www-data /opt/graphite/webapp/
sudo chown www-data:www-data /opt/graphite/storage/log/webapp/*
sudo chown www-data:www-data /opt/graphite/storage/

sudo echo "from django.contrib.auth.models import User; User.objects.create_superuser('admin', 'admin@example.com', 'testpass')" | sudo PYTHONPATH=/opt/graphite/webapp django-admin.py shell --settings=graphite.settings

sudo mkdir /mnt/whisper
sudo rm -rf /opt/graphite/storage/whisper
sudo ln -s /mnt/whisper /opt/graphite/storage/whisper

cat>>/tmp/carbon_conf<<EOF
#[relay]
#LINE_RECEIVER_INTERFACE = 0.0.0.0
#LINE_RECEIVER_PORT = 2003
#PICKLE_RECEIVER_INTERFACE = 0.0.0.0
#PICKLE_RECEIVER_PORT = 2004
#PICKLE_RECEIVER_MAX_LENGTH = 1048576
#
#RELAY_METHOD = consistent-hashing
#REPLICATION_FACTOR = 1
#
#DESTINATIONS = ${carbons}
#
#MAX_QUEUE_SIZE = 1000000
#MAX_DATAPOINTS_PER_MESSAGE = 25000
#
#QUEUE_LOW_WATERMARK_PCT = 0.8
#TIME_TO_DEFER_SENDING = 0.0001
#
#USE_FLOW_CONTROL = True
#
#USE_RATIO_RESET=False
#MIN_RESET_STAT_FLOW=1000
#MIN_RESET_RATIO=0.9
#MIN_RESET_INTERVAL=121


cluster graphite
    carbon_ch
        ${carbons}
    ;

match *
    send to graphite
    ;

EOF

cat>>/tmp/data-sender.py<<EOF
#! /usr/bin/python

# Usage:
# ./data-sender.py 5 2 10 4

import sys
from time import time
from random import randint
import socket

hosts = sys.argv[1:][0]
metrics = sys.argv[1:][1]
max_val = sys.argv[1:][2]
batch = sys.argv[1:][3]

host = "127.0.0.1"
port = 2003

def netcat(host, port, content):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    s.connect(("127.0.0.1", 2003))
    s.sendall(content)
    s.shutdown(socket.SHUT_WR)
    s.close()

epoch = time()
current_batch = 0
payload = ''
for host in xrange(1, int(hosts) + 1):
    for metric in xrange(1, int(metrics) + 1):
        payload += "cg.host-{}.metric-{} {} {}\n".format(
            host,
            metric,
            randint(0, int(max_val)),
            epoch,
        )
        current_batch += 1

        if current_batch >= int(batch):
            netcat(host, port, payload)
            current_batch = 0
            payload = ""

if payload != "":
    netcat(host, port, payload)
EOF

sudo apachectl -t && /usr/sbin/service apache2 restart

sudo cp /tmp/data-sender.py /data-sender.py
sudo chmod +x /data-sender.py

sudo cp /tmp/carbon_conf /opt/graphite/conf/carbon-relay.conf

####### setup c relay######################
wget https://github.com/grobian/carbon-c-relay/archive/master.zip
unzip master.zip
cd carbon-c-relay-master/
./configure
make
make install

sudo relay -f /opt/graphite/conf/carbon-relay.conf -q 1000000 -l /opt/graphite/storage/log/carbon-relay/carbon-relay-a/listener.log -P /var/run/carbon-relay.pid -D
###########################################

sudo cp /opt/graphite/conf/storage-schemas.conf.example /opt/graphite/conf/storage-schemas.conf
sudo /opt/graphite/bin/carbon-relay.py start

sudo /usr/sbin/service apache2 restart
echo 'done'
